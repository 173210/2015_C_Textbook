{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"c",
				"c32"
			],
			[
				"put",
				"puts_t2"
			],
			[
				"s",
				"stack_area.png	w:811 h:351"
			],
			[
				"str",
				"strcmp"
			],
			[
				"o",
				"overflow"
			],
			[
				"sc",
				"scroll〔value〕"
			],
			[
				"overflow",
				"overflow-y: 〔property〕"
			],
			[
				"se",
				"section	Tag"
			],
			[
				"siz",
				"sizeof"
			],
			[
				"print",
				"print_num_as_graph"
			],
			[
				"num",
				"numof"
			],
			[
				"uint",
				"uint32_t"
			],
			[
				"unt",
				"uint64_t"
			],
			[
				"li",
				"list_last_p"
			],
			[
				"list",
				"list_t"
			],
			[
				"n",
				"name"
			],
			[
				"pri",
				"price"
			],
			[
				"my",
				"mygets_s_with_allocate"
			],
			[
				"ma",
				"maker"
			],
			[
				"size",
				"size_t"
			],
			[
				"arr",
				"arr_size"
			],
			[
				"in",
				"insert_str"
			],
			[
				"de",
				"den"
			],
			[
				"v",
				"val2"
			],
			[
				"d",
				"den"
			],
			[
				"va",
				"val1"
			],
			[
				"an",
				"angle2"
			],
			[
				"ang",
				"angle_t"
			],
			[
				"int",
				"int8_t"
			],
			[
				"av",
				"average"
			],
			[
				"a",
				"average"
			],
			[
				"for",
				"for_each_row"
			],
			[
				"data",
				"data_i"
			],
			[
				"make",
				"make_str_database"
			],
			[
				"is",
				"create_is_prime_num_table"
			],
			[
				"da",
				"dailyrate"
			],
			[
				"me",
				"medication_charge"
			],
			[
				"pa",
				"patienttype"
			],
			[
				"type",
				"typename"
			],
			[
				"si",
				"table_of_time_required_size"
			],
			[
				"get",
				"get_integer_num"
			],
			[
				"re",
				"required_time"
			],
			[
				"rnd",
				"rnd_num"
			],
			[
				"s_",
				"s_last_i"
			],
			[
				"eval_",
				"eval_str_arr_buf"
			],
			[
				"ski",
				"skip_eval_str_until_find_digit_or_bracket"
			],
			[
				"buf",
				"buf_size"
			],
			[
				"ch",
				"children"
			],
			[
				"szie",
				"size"
			],
			[
				"begi",
				"begin_index"
			],
			[
				"ci",
				"children_num"
			],
			[
				"e",
				"eval_str_arr"
			],
			[
				"sie",
				"size_t"
			],
			[
				"br",
				"bracket_open_count"
			],
			[
				"bra",
				"bracket_close_count"
			],
			[
				"di",
				"division_names"
			],
			[
				"divi",
				"division_name"
			],
			[
				"C",
				"Compare"
			],
			[
				"static",
				"static_assert"
			],
			[
				"it",
				"it2"
			],
			[
				"l",
				"long"
			],
			[
				"ta",
				"target_num"
			],
			[
				"ra",
				"range_min"
			],
			[
				"inp",
				"input_buf"
			],
			[
				"Cs",
				"CStdioFile"
			],
			[
				"rea",
				"read_line_from_cfile"
			],
			[
				"te",
				"text_v"
			],
			[
				"CS",
				"CString"
			],
			[
				"nm",
				"numbers"
			],
			[
				"input",
				"input_key"
			],
			[
				"prin",
				"print_mb_num"
			],
			[
				"ti",
				"title=〔attribute〕"
			],
			[
				"hoge",
				"hoge1"
			],
			[
				"h",
				"height"
			],
			[
				"cas",
				"case4_input"
			],
			[
				"case",
				"case1_input〔argument〕"
			],
			[
				"ca",
				"case4_inout"
			],
			[
				"col",
				"color_arr〔variable〕"
			],
			[
				"doc",
				"doc_arr〔variable〕"
			],
			[
				"p",
				"push〔function〕"
			],
			[
				"al",
				"alt	Attr"
			],
			[
				"blo",
				"blockquote	Tag"
			],
			[
				"INT",
				"INT_MIN"
			],
			[
				"back",
				"background-color"
			],
			[
				"backi",
				"background-image"
			],
			[
				"rb",
				"rgba()"
			],
			[
				"po",
				"pos-r	position: relative;"
			],
			[
				"z",
				"z-index"
			],
			[
				"scr",
				"script"
			],
			[
				"cl",
				"click〔function〕"
			],
			[
				"fun",
				"function〔keyword〕"
			],
			[
				"proto",
				"prototype"
			],
			[
				"bird",
				"bird_canvas_c〔class〕"
			],
			[
				"bir",
				"bird_canvas〔function〕"
			],
			[
				"tabl",
				"table-cell"
			],
			[
				"inl",
				"inline-block"
			],
			[
				"font",
				"font-size"
			],
			[
				"m",
				"mrdrnd"
			],
			[
				"INT_M",
				"INT_MIN"
			],
			[
				"png",
				"navigator_Firefox38_0_5.png	w:1600 h:900"
			],
			[
				"lay",
				"layer"
			],
			[
				"layer",
				"layer_arg〔variable〕"
			],
			[
				"over",
				"overflow-y: 〔property〕"
			],
			[
				"map",
				"map_1f"
			],
			[
				"hide",
				"hide_all_description〔function〕"
			],
			[
				"t",
				"t_id"
			],
			[
				"la",
				"layers_"
			],
			[
				"dr",
				"drawImage"
			],
			[
				"i",
				"id_"
			],
			[
				"tex",
				"text-align"
			],
			[
				"wi",
				"width"
			],
			[
				"css",
				"exhibition.css"
			],
			[
				"js",
				"pseudo_color_transition_jCanvas.js"
			],
			[
				"bai",
				"background-image: 〔property〕"
			],
			[
				"st",
				"style	Tag"
			],
			[
				"margi",
				"margin-left"
			],
			[
				"pag",
				"pagetitle"
			],
			[
				"IN",
				"INPUT_STR_LIMITS"
			],
			[
				"be",
				"begin"
			],
			[
				"sho",
				"shouhin"
			],
			[
				"con",
				"convert_from_input"
			],
			[
				"ki",
				"kingaku"
			],
			[
				"inpu",
				"inputed_num"
			],
			[
				"swap",
				"swap_char_ptr"
			],
			[
				"ty",
				"typeof"
			],
			[
				"bloc",
				"blockquote"
			],
			[
				"tab",
				"table-cell"
			],
			[
				"mar",
				"margin"
			]
		]
	},
	"buffers":
	[
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 12121,
				"line_ending": "Windows"
			}
		},
		{
			"file": "20pointer_to_function.html",
			"settings":
			{
				"buffer_size": 7077,
				"line_ending": "Windows"
			}
		},
		{
			"file": "06conditional_state.html",
			"settings":
			{
				"buffer_size": 21327,
				"line_ending": "Windows"
			}
		},
		{
			"file": "09standard_input_output.html",
			"settings":
			{
				"buffer_size": 19515,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#include <stdio.h>\n\nint main(void){\n\nint i,n,k[100];\n\nfor(j=0; j<100; j++){\nk[j]=0;\n}\n\nscanf(\"%d\",&n);\n\nfor(j=0; j<n; j++){\nscanf(\"%d\",&i);\nk[i]=k[i]+1;\n}\n\nfor(i=0; i<100; i++){\nif(k[i]>0){\nprintf(\"%d%4d\\n\",i,k[i]);\n}\n}\n} ",
			"settings":
			{
				"buffer_size": 222,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/j.pierreno/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
			"settings":
			{
				"buffer_size": 94,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "[\n	{ \"keys\": [\"ctrl+shift+n\"], \"command\": \"new_window\" },\n	{ \"keys\": [\"ctrl+shift+w\"], \"command\": \"close_window\" },\n	{ \"keys\": [\"ctrl+o\"], \"command\": \"prompt_open_file\" },\n	{ \"keys\": [\"ctrl+shift+t\"], \"command\": \"reopen_last_file\" },\n	{ \"keys\": [\"alt+o\"], \"command\": \"switch_file\", \"args\": {\"extensions\": [\"cpp\", \"cxx\", \"cc\", \"c\", \"hpp\", \"hxx\", \"hh\", \"h\", \"ipp\", \"inl\", \"m\", \"mm\"]} },\n	{ \"keys\": [\"ctrl+n\"], \"command\": \"new_file\" },\n	{ \"keys\": [\"ctrl+s\"], \"command\": \"save\" },\n	{ \"keys\": [\"ctrl+shift+s\"], \"command\": \"prompt_save_as\" },\n	{ \"keys\": [\"ctrl+f4\"], \"command\": \"close_file\" },\n	{ \"keys\": [\"ctrl+w\"], \"command\": \"close\" },\n\n	{ \"keys\": [\"ctrl+k\", \"ctrl+b\"], \"command\": \"toggle_side_bar\" },\n	{ \"keys\": [\"f11\"], \"command\": \"toggle_full_screen\" },\n	{ \"keys\": [\"shift+f11\"], \"command\": \"toggle_distraction_free\" },\n\n	{ \"keys\": [\"backspace\"], \"command\": \"left_delete\" },\n	{ \"keys\": [\"shift+backspace\"], \"command\": \"left_delete\" },\n	{ \"keys\": [\"ctrl+shift+backspace\"], \"command\": \"left_delete\" },\n	{ \"keys\": [\"delete\"], \"command\": \"right_delete\" },\n	{ \"keys\": [\"enter\"], \"command\": \"insert\", \"args\": {\"characters\": \"\\n\"} },\n	{ \"keys\": [\"shift+enter\"], \"command\": \"insert\", \"args\": {\"characters\": \"\\n\"} },\n\n	{ \"keys\": [\"ctrl+z\"], \"command\": \"undo\" },\n	{ \"keys\": [\"ctrl+shift+z\"], \"command\": \"redo\" },\n	{ \"keys\": [\"ctrl+y\"], \"command\": \"redo_or_repeat\" },\n	{ \"keys\": [\"ctrl+u\"], \"command\": \"soft_undo\" },\n	{ \"keys\": [\"ctrl+shift+u\"], \"command\": \"soft_redo\" },\n\n	{ \"keys\": [\"shift+delete\"], \"command\": \"cut\" },\n	{ \"keys\": [\"ctrl+insert\"], \"command\": \"copy\" },\n	{ \"keys\": [\"shift+insert\"], \"command\": \"paste\" },\n	{ \"keys\": [\"ctrl+x\"], \"command\": \"cut\" },\n	{ \"keys\": [\"ctrl+c\"], \"command\": \"copy\" },\n	{ \"keys\": [\"ctrl+v\"], \"command\": \"paste\" },\n	{ \"keys\": [\"ctrl+shift+v\"], \"command\": \"paste_and_indent\" },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+v\"], \"command\": \"paste_from_history\" },\n\n	{ \"keys\": [\"left\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": false} },\n	{ \"keys\": [\"right\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true} },\n	{ \"keys\": [\"up\"], \"command\": \"move\", \"args\": {\"by\": \"lines\", \"forward\": false} },\n	{ \"keys\": [\"down\"], \"command\": \"move\", \"args\": {\"by\": \"lines\", \"forward\": true} },\n	{ \"keys\": [\"shift+left\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": false, \"extend\": true} },\n	{ \"keys\": [\"shift+right\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true, \"extend\": true} },\n	{ \"keys\": [\"shift+up\"], \"command\": \"move\", \"args\": {\"by\": \"lines\", \"forward\": false, \"extend\": true} },\n	{ \"keys\": [\"shift+down\"], \"command\": \"move\", \"args\": {\"by\": \"lines\", \"forward\": true, \"extend\": true} },\n\n	{ \"keys\": [\"ctrl+left\"], \"command\": \"move\", \"args\": {\"by\": \"words\", \"forward\": false} },\n	{ \"keys\": [\"ctrl+right\"], \"command\": \"move\", \"args\": {\"by\": \"word_ends\", \"forward\": true} },\n	{ \"keys\": [\"ctrl+shift+left\"], \"command\": \"move\", \"args\": {\"by\": \"words\", \"forward\": false, \"extend\": true} },\n	{ \"keys\": [\"ctrl+shift+right\"], \"command\": \"move\", \"args\": {\"by\": \"word_ends\", \"forward\": true, \"extend\": true} },\n\n	{ \"keys\": [\"alt+left\"], \"command\": \"move\", \"args\": {\"by\": \"subwords\", \"forward\": false} },\n	{ \"keys\": [\"alt+right\"], \"command\": \"move\", \"args\": {\"by\": \"subword_ends\", \"forward\": true} },\n	{ \"keys\": [\"alt+shift+left\"], \"command\": \"move\", \"args\": {\"by\": \"subwords\", \"forward\": false, \"extend\": true} },\n	{ \"keys\": [\"alt+shift+right\"], \"command\": \"move\", \"args\": {\"by\": \"subword_ends\", \"forward\": true, \"extend\": true} },\n\n	{ \"keys\": [\"ctrl+alt+up\"], \"command\": \"select_lines\", \"args\": {\"forward\": false} },\n	{ \"keys\": [\"ctrl+alt+down\"], \"command\": \"select_lines\", \"args\": {\"forward\": true} },\n\n	{ \"keys\": [\"pageup\"], \"command\": \"move\", \"args\": {\"by\": \"pages\", \"forward\": false} },\n	{ \"keys\": [\"pagedown\"], \"command\": \"move\", \"args\": {\"by\": \"pages\", \"forward\": true} },\n	{ \"keys\": [\"shift+pageup\"], \"command\": \"move\", \"args\": {\"by\": \"pages\", \"forward\": false, \"extend\": true} },\n	{ \"keys\": [\"shift+pagedown\"], \"command\": \"move\", \"args\": {\"by\": \"pages\", \"forward\": true, \"extend\": true} },\n\n	{ \"keys\": [\"home\"], \"command\": \"move_to\", \"args\": {\"to\": \"bol\", \"extend\": false} },\n	{ \"keys\": [\"end\"], \"command\": \"move_to\", \"args\": {\"to\": \"eol\", \"extend\": false} },\n	{ \"keys\": [\"shift+home\"], \"command\": \"move_to\", \"args\": {\"to\": \"bol\", \"extend\": true} },\n	{ \"keys\": [\"shift+end\"], \"command\": \"move_to\", \"args\": {\"to\": \"eol\", \"extend\": true} },\n	{ \"keys\": [\"ctrl+home\"], \"command\": \"move_to\", \"args\": {\"to\": \"bof\", \"extend\": false} },\n	{ \"keys\": [\"ctrl+end\"], \"command\": \"move_to\", \"args\": {\"to\": \"eof\", \"extend\": false} },\n	{ \"keys\": [\"ctrl+shift+home\"], \"command\": \"move_to\", \"args\": {\"to\": \"bof\", \"extend\": true} },\n	{ \"keys\": [\"ctrl+shift+end\"], \"command\": \"move_to\", \"args\": {\"to\": \"eof\", \"extend\": true} },\n\n\n	{ \"keys\": [\"ctrl+up\"], \"command\": \"scroll_lines\", \"args\": {\"amount\": 1.0 } },\n	{ \"keys\": [\"ctrl+down\"], \"command\": \"scroll_lines\", \"args\": {\"amount\": -1.0 } },\n\n	{ \"keys\": [\"ctrl+pagedown\"], \"command\": \"next_view\" },\n	{ \"keys\": [\"ctrl+pageup\"], \"command\": \"prev_view\" },\n\n	{ \"keys\": [\"ctrl+tab\"], \"command\": \"next_view_in_stack\" },\n	{ \"keys\": [\"ctrl+shift+tab\"], \"command\": \"prev_view_in_stack\" },\n\n	{ \"keys\": [\"ctrl+a\"], \"command\": \"select_all\" },\n	{ \"keys\": [\"ctrl+shift+l\"], \"command\": \"split_selection_into_lines\" },\n	{ \"keys\": [\"escape\"], \"command\": \"single_selection\", \"context\":\n		[\n			{ \"key\": \"num_selections\", \"operator\": \"not_equal\", \"operand\": 1 }\n		]\n	},\n	{ \"keys\": [\"escape\"], \"command\": \"clear_fields\", \"context\":\n		[\n			{ \"key\": \"has_next_field\", \"operator\": \"equal\", \"operand\": true }\n		]\n	},\n	{ \"keys\": [\"escape\"], \"command\": \"clear_fields\", \"context\":\n		[\n			{ \"key\": \"has_prev_field\", \"operator\": \"equal\", \"operand\": true }\n		]\n	},\n	{ \"keys\": [\"escape\"], \"command\": \"hide_panel\", \"args\": {\"cancel\": true},\n		\"context\":\n		[\n			{ \"key\": \"panel_visible\", \"operator\": \"equal\", \"operand\": true }\n		]\n	},\n	{ \"keys\": [\"escape\"], \"command\": \"hide_overlay\", \"context\":\n		[\n			{ \"key\": \"overlay_visible\", \"operator\": \"equal\", \"operand\": true }\n		]\n	},\n	{ \"keys\": [\"escape\"], \"command\": \"hide_popup\", \"context\":\n		[\n			{ \"key\": \"popup_visible\", \"operator\": \"equal\", \"operand\": true }\n		]\n	},\n	{ \"keys\": [\"escape\"], \"command\": \"hide_auto_complete\", \"context\":\n		[\n			{ \"key\": \"auto_complete_visible\", \"operator\": \"equal\", \"operand\": true }\n		]\n	},\n\n	{ \"keys\": [\"tab\"], \"command\": \"insert_best_completion\", \"args\": {\"default\": \"\\t\", \"exact\": true} },\n	{ \"keys\": [\"tab\"], \"command\": \"insert_best_completion\", \"args\": {\"default\": \"\\t\", \"exact\": false},\n		\"context\":\n		[\n			{ \"key\": \"setting.tab_completion\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"preceding_text\", \"operator\": \"regex_match\", \"operand\": \".*[^0-9]$\", \"match_all\": true },\n		]\n	},\n	{ \"keys\": [\"tab\"], \"command\": \"replace_completion_with_next_completion\", \"context\":\n		[\n			{ \"key\": \"last_command\", \"operator\": \"equal\", \"operand\": \"insert_best_completion\" },\n			{ \"key\": \"setting.tab_completion\", \"operator\": \"equal\", \"operand\": true }\n		]\n	},\n	{ \"keys\": [\"tab\"], \"command\": \"reindent\", \"context\":\n		[\n			{ \"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"preceding_text\", \"operator\": \"regex_match\", \"operand\": \"^$\", \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_match\", \"operand\": \"^$\", \"match_all\": true }\n		]\n	},\n	{ \"keys\": [\"tab\"], \"command\": \"indent\", \"context\":\n		[\n			{ \"key\": \"text\", \"operator\": \"regex_contains\", \"operand\": \"\\n\" }\n		]\n	},\n	{ \"keys\": [\"tab\"], \"command\": \"next_field\", \"context\":\n		[\n			{ \"key\": \"has_next_field\", \"operator\": \"equal\", \"operand\": true }\n		]\n	},\n	{ \"keys\": [\"tab\"], \"command\": \"commit_completion\", \"context\":\n		[\n			{ \"key\": \"auto_complete_visible\" },\n			{ \"key\": \"setting.auto_complete_commit_on_tab\" }\n		]\n	},\n\n	{ \"keys\": [\"shift+tab\"], \"command\": \"insert\", \"args\": {\"characters\": \"\\t\"} },\n	{ \"keys\": [\"shift+tab\"], \"command\": \"unindent\", \"context\":\n		[\n			{ \"key\": \"setting.shift_tab_unindent\", \"operator\": \"equal\", \"operand\": true }\n		]\n	},\n	{ \"keys\": [\"shift+tab\"], \"command\": \"unindent\", \"context\":\n		[\n			{ \"key\": \"preceding_text\", \"operator\": \"regex_match\", \"operand\": \"^[\\t ]*\" }\n		]\n	},\n	{ \"keys\": [\"shift+tab\"], \"command\": \"unindent\", \"context\":\n		[\n			{ \"key\": \"text\", \"operator\": \"regex_contains\", \"operand\": \"\\n\" }\n		]\n	},\n	{ \"keys\": [\"shift+tab\"], \"command\": \"prev_field\", \"context\":\n		[\n			{ \"key\": \"has_prev_field\", \"operator\": \"equal\", \"operand\": true }\n		]\n	},\n\n	{ \"keys\": [\"ctrl+]\"], \"command\": \"indent\" },\n	{ \"keys\": [\"ctrl+[\"], \"command\": \"unindent\" },\n\n	{ \"keys\": [\"insert\"], \"command\": \"toggle_overwrite\" },\n\n	{ \"keys\": [\"ctrl+l\"], \"command\": \"expand_selection\", \"args\": {\"to\": \"line\"} },\n	{ \"keys\": [\"ctrl+d\"], \"command\": \"find_under_expand\" },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+d\"], \"command\": \"find_under_expand_skip\" },\n	{ \"keys\": [\"ctrl+shift+space\"], \"command\": \"expand_selection\", \"args\": {\"to\": \"scope\"} },\n	{ \"keys\": [\"ctrl+shift+m\"], \"command\": \"expand_selection\", \"args\": {\"to\": \"brackets\"} },\n	{ \"keys\": [\"ctrl+m\"], \"command\": \"move_to\", \"args\": {\"to\": \"brackets\"} },\n	{ \"keys\": [\"ctrl+shift+j\"], \"command\": \"expand_selection\", \"args\": {\"to\": \"indentation\"} },\n	{ \"keys\": [\"ctrl+shift+a\"], \"command\": \"expand_selection\", \"args\": {\"to\": \"tag\"} },\n\n	{ \"keys\": [\"alt+.\"], \"command\": \"close_tag\" },\n\n	{ \"keys\": [\"ctrl+q\"], \"command\": \"toggle_record_macro\" },\n	{ \"keys\": [\"ctrl+shift+q\"], \"command\": \"run_macro\" },\n\n	{ \"keys\": [\"ctrl+enter\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Add Line.sublime-macro\"} },\n	{ \"keys\": [\"ctrl+shift+enter\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Add Line Before.sublime-macro\"} },\n	{ \"keys\": [\"enter\"], \"command\": \"commit_completion\", \"context\":\n		[\n			{ \"key\": \"auto_complete_visible\" },\n			{ \"key\": \"setting.auto_complete_commit_on_tab\", \"operand\": false }\n		]\n	},\n\n	{ \"keys\": [\"ctrl+p\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"show_files\": true} },\n	{ \"keys\": [\"ctrl+shift+p\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"command_palette\"} },\n	{ \"keys\": [\"ctrl+alt+p\"], \"command\": \"prompt_select_workspace\" },\n	{ \"keys\": [\"ctrl+r\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \"@\"} },\n	{ \"keys\": [\"ctrl+g\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \":\"} },\n	{ \"keys\": [\"ctrl+;\"], \"command\": \"show_overlay\", \"args\": {\"overlay\": \"goto\", \"text\": \"#\"} },\n	{ \"keys\": [\"f12\"], \"command\": \"goto_definition\" },\n	{ \"keys\": [\"ctrl+shift+r\"], \"command\": \"goto_symbol_in_project\" },\n	{ \"keys\": [\"alt+keypad_minus\"], \"command\": \"jump_back\" },\n	{ \"keys\": [\"alt+shift+keypad_minus\"], \"command\": \"jump_forward\" },\n	{ \"keys\": [\"alt+-\"], \"command\": \"jump_back\" },\n	{ \"keys\": [\"alt+shift+-\"], \"command\": \"jump_forward\" },\n\n	{ \"keys\": [\"ctrl+i\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"incremental_find\", \"reverse\": false} },\n	{ \"keys\": [\"ctrl+shift+i\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"incremental_find\", \"reverse\": true} },\n	{ \"keys\": [\"ctrl+f\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"find\", \"reverse\": false} },\n	{ \"keys\": [\"ctrl+h\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"replace\", \"reverse\": false} },\n	{ \"keys\": [\"ctrl+shift+h\"], \"command\": \"replace_next\" },\n	{ \"keys\": [\"f3\"], \"command\": \"find_next\" },\n	{ \"keys\": [\"shift+f3\"], \"command\": \"find_prev\" },\n	{ \"keys\": [\"ctrl+f3\"], \"command\": \"find_under\" },\n	{ \"keys\": [\"ctrl+shift+f3\"], \"command\": \"find_under_prev\" },\n	{ \"keys\": [\"alt+f3\"], \"command\": \"find_all_under\" },\n	{ \"keys\": [\"ctrl+e\"], \"command\": \"slurp_find_string\" },\n	{ \"keys\": [\"ctrl+shift+e\"], \"command\": \"slurp_replace_string\" },\n	{ \"keys\": [\"ctrl+shift+f\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"find_in_files\"} },\n	{ \"keys\": [\"f4\"], \"command\": \"next_result\" },\n	{ \"keys\": [\"shift+f4\"], \"command\": \"prev_result\" },\n\n	{ \"keys\": [\"f6\"], \"command\": \"toggle_setting\", \"args\": {\"setting\": \"spell_check\"} },\n	{ \"keys\": [\"ctrl+f6\"], \"command\": \"next_misspelling\" },\n	{ \"keys\": [\"ctrl+shift+f6\"], \"command\": \"prev_misspelling\" },\n\n	{ \"keys\": [\"ctrl+shift+up\"], \"command\": \"swap_line_up\" },\n	{ \"keys\": [\"ctrl+shift+down\"], \"command\": \"swap_line_down\" },\n\n	{ \"keys\": [\"ctrl+backspace\"], \"command\": \"delete_word\", \"args\": { \"forward\": false } },\n	{ \"keys\": [\"ctrl+shift+backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete to Hard BOL.sublime-macro\"} },\n\n	{ \"keys\": [\"ctrl+delete\"], \"command\": \"delete_word\", \"args\": { \"forward\": true } },\n	{ \"keys\": [\"ctrl+shift+delete\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete to Hard EOL.sublime-macro\"} },\n\n	{ \"keys\": [\"ctrl+/\"], \"command\": \"toggle_comment\", \"args\": { \"block\": false } },\n	{ \"keys\": [\"ctrl+shift+/\"], \"command\": \"toggle_comment\", \"args\": { \"block\": true } },\n\n	{ \"keys\": [\"ctrl+j\"], \"command\": \"join_lines\" },\n	{ \"keys\": [\"ctrl+shift+d\"], \"command\": \"duplicate_line\" },\n\n	{ \"keys\": [\"ctrl+`\"], \"command\": \"show_panel\", \"args\": {\"panel\": \"console\", \"toggle\": true} },\n\n	{ \"keys\": [\"ctrl+space\"], \"command\": \"auto_complete\" },\n	{ \"keys\": [\"ctrl+space\"], \"command\": \"replace_completion_with_auto_complete\", \"context\":\n		[\n			{ \"key\": \"last_command\", \"operator\": \"equal\", \"operand\": \"insert_best_completion\" },\n			{ \"key\": \"auto_complete_visible\", \"operator\": \"equal\", \"operand\": false },\n			{ \"key\": \"setting.tab_completion\", \"operator\": \"equal\", \"operand\": true }\n		]\n	},\n\n	{ \"keys\": [\"ctrl+alt+shift+p\"], \"command\": \"show_scope_name\" },\n\n	{ \"keys\": [\"f7\"], \"command\": \"build\" },\n	{ \"keys\": [\"ctrl+b\"], \"command\": \"build\" },\n	{ \"keys\": [\"ctrl+shift+b\"], \"command\": \"build\", \"args\": {\"select\": true} },\n	{ \"keys\": [\"ctrl+break\"], \"command\": \"exec\", \"args\": {\"kill\": true} },\n\n	{ \"keys\": [\"ctrl+t\"], \"command\": \"transpose\" },\n\n	{ \"keys\": [\"f9\"], \"command\": \"sort_lines\", \"args\": {\"case_sensitive\": false} },\n	{ \"keys\": [\"ctrl+f9\"], \"command\": \"sort_lines\", \"args\": {\"case_sensitive\": true} },\n\n	// Auto-pair quotes\n	{ \"keys\": [\"\\\"\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"\\\"$0\\\"\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|\\\\}|>|$)\", \"match_all\": true },\n			{ \"key\": \"preceding_text\", \"operator\": \"not_regex_contains\", \"operand\": \"[\\\"a-zA-Z0-9_]$\", \"match_all\": true },\n			{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.double - punctuation.definition.string.end\", \"match_all\": true }\n		]\n	},\n	{ \"keys\": [\"\\\"\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"\\\"${0:$SELECTION}\\\"\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true }\n		]\n	},\n	{ \"keys\": [\"\\\"\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\"\", \"match_all\": true },\n			{ \"key\": \"selector\", \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\", \"match_all\": true },\n			{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.double - punctuation.definition.string.end\", \"match_all\": true },\n		]\n	},\n	{ \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\"$\", \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\"\", \"match_all\": true },\n			{ \"key\": \"selector\", \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\", \"match_all\": true },\n			{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.double - punctuation.definition.string.end\", \"match_all\": true },\n		]\n	},\n\n	// Auto-pair single quotes\n	{ \"keys\": [\"'\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"'$0'\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|\\\\}|>|$)\", \"match_all\": true },\n			{ \"key\": \"preceding_text\", \"operator\": \"not_regex_contains\", \"operand\": \"['a-zA-Z0-9_]$\", \"match_all\": true },\n			{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.single - punctuation.definition.string.end\", \"match_all\": true }\n		]\n	},\n	{ \"keys\": [\"'\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"'${0:$SELECTION}'\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true }\n		]\n	},\n	{ \"keys\": [\"'\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^'\", \"match_all\": true },\n			{ \"key\": \"selector\", \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\", \"match_all\": true },\n			{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.single - punctuation.definition.string.end\", \"match_all\": true },\n		]\n	},\n	{ \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"'$\", \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^'\", \"match_all\": true },\n			{ \"key\": \"selector\", \"operator\": \"not_equal\", \"operand\": \"punctuation.definition.string.begin\", \"match_all\": true },\n			{ \"key\": \"eol_selector\", \"operator\": \"not_equal\", \"operand\": \"string.quoted.single - punctuation.definition.string.end\", \"match_all\": true },\n		]\n	},\n\n	// Auto-pair brackets\n	{ \"keys\": [\"(\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"($0)\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|;|\\\\}|$)\", \"match_all\": true }\n		]\n	},\n	{ \"keys\": [\"(\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"(${0:$SELECTION})\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true }\n		]\n	},\n	{ \"keys\": [\")\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\)\", \"match_all\": true }\n		]\n	},\n	{ \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\($\", \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\)\", \"match_all\": true }\n		]\n	},\n\n	// Auto-pair square brackets\n	{ \"keys\": [\"[\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"[$0]\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|;|\\\\}|$)\", \"match_all\": true }\n		]\n	},\n	{ \"keys\": [\"[\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"[${0:$SELECTION}]\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true }\n		]\n	},\n	{ \"keys\": [\"]\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\]\", \"match_all\": true }\n		]\n	},\n	{ \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\[$\", \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\]\", \"match_all\": true }\n		]\n	},\n\n	// Auto-pair curly brackets\n	{ \"keys\": [\"{\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"{$0}\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^(?:\\t| |\\\\)|]|\\\\}|$)\", \"match_all\": true }\n		]\n	},\n	{ \"keys\": [\"{\"], \"command\": \"wrap_block\", \"args\": {\"begin\": \"{\", \"end\": \"}\"}, \"context\":\n		[\n			{ \"key\": \"indented_block\", \"match_all\": true },\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_match\", \"operand\": \"^$\", \"match_all\": true },\n		]\n	},\n	{ \"keys\": [\"{\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"{${0:$SELECTION}}\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true }\n		]\n	},\n	{ \"keys\": [\"}\"], \"command\": \"move\", \"args\": {\"by\": \"characters\", \"forward\": true}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\", \"match_all\": true }\n		]\n	},\n	{ \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\{$\", \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\", \"match_all\": true }\n		]\n	},\n\n	{ \"keys\": [\"enter\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Add Line in Braces.sublime-macro\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\{$\", \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\", \"match_all\": true }\n		]\n	},\n	{ \"keys\": [\"shift+enter\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Add Line in Braces.sublime-macro\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n			{ \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\{$\", \"match_all\": true },\n			{ \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\}\", \"match_all\": true }\n		]\n	},\n\n	{ \"keys\": [\"enter\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"\\n\\t$0\\n\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"meta.scope.between-tag-pair\", \"match_all\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n		]\n	},\n	{ \"keys\": [\"shift+enter\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"\\n\\t$0\\n\"}, \"context\":\n		[\n			{ \"key\": \"setting.auto_indent\", \"operator\": \"equal\", \"operand\": true },\n			{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"meta.scope.between-tag-pair\", \"match_all\": true },\n			{ \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n		]\n	},\n\n	{\n		\"keys\": [\"alt+shift+1\"],\n		\"command\": \"set_layout\",\n		\"args\":\n		{\n			\"cols\": [0.0, 1.0],\n			\"rows\": [0.0, 1.0],\n			\"cells\": [[0, 0, 1, 1]]\n		}\n	},\n	{\n		\"keys\": [\"alt+shift+2\"],\n		\"command\": \"set_layout\",\n		\"args\":\n		{\n			\"cols\": [0.0, 0.5, 1.0],\n			\"rows\": [0.0, 1.0],\n			\"cells\": [[0, 0, 1, 1], [1, 0, 2, 1]]\n		}\n	},\n	{\n		\"keys\": [\"alt+shift+3\"],\n		\"command\": \"set_layout\",\n		\"args\":\n		{\n			\"cols\": [0.0, 0.33, 0.66, 1.0],\n			\"rows\": [0.0, 1.0],\n			\"cells\": [[0, 0, 1, 1], [1, 0, 2, 1], [2, 0, 3, 1]]\n		}\n	},\n	{\n		\"keys\": [\"alt+shift+4\"],\n		\"command\": \"set_layout\",\n		\"args\":\n		{\n			\"cols\": [0.0, 0.25, 0.5, 0.75, 1.0],\n			\"rows\": [0.0, 1.0],\n			\"cells\": [[0, 0, 1, 1], [1, 0, 2, 1], [2, 0, 3, 1], [3, 0, 4, 1]]\n		}\n	},\n	{\n		\"keys\": [\"alt+shift+8\"],\n		\"command\": \"set_layout\",\n		\"args\":\n		{\n			\"cols\": [0.0, 1.0],\n			\"rows\": [0.0, 0.5, 1.0],\n			\"cells\": [[0, 0, 1, 1], [0, 1, 1, 2]]\n		}\n	},\n	{\n		\"keys\": [\"alt+shift+9\"],\n		\"command\": \"set_layout\",\n		\"args\":\n		{\n			\"cols\": [0.0, 1.0],\n			\"rows\": [0.0, 0.33, 0.66, 1.0],\n			\"cells\": [[0, 0, 1, 1], [0, 1, 1, 2], [0, 2, 1, 3]]\n		}\n	},\n	{\n		\"keys\": [\"alt+shift+5\"],\n		\"command\": \"set_layout\",\n		\"args\":\n		{\n			\"cols\": [0.0, 0.5, 1.0],\n			\"rows\": [0.0, 0.5, 1.0],\n			\"cells\":\n			[\n				[0, 0, 1, 1], [1, 0, 2, 1],\n				[0, 1, 1, 2], [1, 1, 2, 2]\n			]\n		}\n	},\n	{ \"keys\": [\"ctrl+1\"], \"command\": \"focus_group\", \"args\": { \"group\": 0 } },\n	{ \"keys\": [\"ctrl+2\"], \"command\": \"focus_group\", \"args\": { \"group\": 1 } },\n	{ \"keys\": [\"ctrl+3\"], \"command\": \"focus_group\", \"args\": { \"group\": 2 } },\n	{ \"keys\": [\"ctrl+4\"], \"command\": \"focus_group\", \"args\": { \"group\": 3 } },\n	{ \"keys\": [\"ctrl+5\"], \"command\": \"focus_group\", \"args\": { \"group\": 4 } },\n	{ \"keys\": [\"ctrl+6\"], \"command\": \"focus_group\", \"args\": { \"group\": 5 } },\n	{ \"keys\": [\"ctrl+7\"], \"command\": \"focus_group\", \"args\": { \"group\": 6 } },\n	{ \"keys\": [\"ctrl+8\"], \"command\": \"focus_group\", \"args\": { \"group\": 7 } },\n	{ \"keys\": [\"ctrl+9\"], \"command\": \"focus_group\", \"args\": { \"group\": 8 } },\n	{ \"keys\": [\"ctrl+shift+1\"], \"command\": \"move_to_group\", \"args\": { \"group\": 0 } },\n	{ \"keys\": [\"ctrl+shift+2\"], \"command\": \"move_to_group\", \"args\": { \"group\": 1 } },\n	{ \"keys\": [\"ctrl+shift+3\"], \"command\": \"move_to_group\", \"args\": { \"group\": 2 } },\n	{ \"keys\": [\"ctrl+shift+4\"], \"command\": \"move_to_group\", \"args\": { \"group\": 3 } },\n	{ \"keys\": [\"ctrl+shift+5\"], \"command\": \"move_to_group\", \"args\": { \"group\": 4 } },\n	{ \"keys\": [\"ctrl+shift+6\"], \"command\": \"move_to_group\", \"args\": { \"group\": 5 } },\n	{ \"keys\": [\"ctrl+shift+7\"], \"command\": \"move_to_group\", \"args\": { \"group\": 6 } },\n	{ \"keys\": [\"ctrl+shift+8\"], \"command\": \"move_to_group\", \"args\": { \"group\": 7 } },\n	{ \"keys\": [\"ctrl+shift+9\"], \"command\": \"move_to_group\", \"args\": { \"group\": 8 } },\n	{ \"keys\": [\"ctrl+0\"], \"command\": \"focus_side_bar\" },\n\n	{ \"keys\": [\"ctrl+k\", \"ctrl+up\"], \"command\": \"new_pane\" },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+shift+up\"], \"command\": \"new_pane\", \"args\": {\"move\": false} },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+down\"], \"command\": \"close_pane\" },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+left\"], \"command\": \"focus_neighboring_group\", \"args\": {\"forward\": false} },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+right\"], \"command\": \"focus_neighboring_group\" },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+shift+left\"], \"command\": \"move_to_neighboring_group\", \"args\": {\"forward\": false} },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+shift+right\"], \"command\": \"move_to_neighboring_group\" },\n\n	{ \"keys\": [\"alt+1\"], \"command\": \"select_by_index\", \"args\": { \"index\": 0 } },\n	{ \"keys\": [\"alt+2\"], \"command\": \"select_by_index\", \"args\": { \"index\": 1 } },\n	{ \"keys\": [\"alt+3\"], \"command\": \"select_by_index\", \"args\": { \"index\": 2 } },\n	{ \"keys\": [\"alt+4\"], \"command\": \"select_by_index\", \"args\": { \"index\": 3 } },\n	{ \"keys\": [\"alt+5\"], \"command\": \"select_by_index\", \"args\": { \"index\": 4 } },\n	{ \"keys\": [\"alt+6\"], \"command\": \"select_by_index\", \"args\": { \"index\": 5 } },\n	{ \"keys\": [\"alt+7\"], \"command\": \"select_by_index\", \"args\": { \"index\": 6 } },\n	{ \"keys\": [\"alt+8\"], \"command\": \"select_by_index\", \"args\": { \"index\": 7 } },\n	{ \"keys\": [\"alt+9\"], \"command\": \"select_by_index\", \"args\": { \"index\": 8 } },\n	{ \"keys\": [\"alt+0\"], \"command\": \"select_by_index\", \"args\": { \"index\": 9 } },\n\n	{ \"keys\": [\"f2\"], \"command\": \"next_bookmark\" },\n	{ \"keys\": [\"shift+f2\"], \"command\": \"prev_bookmark\" },\n	{ \"keys\": [\"ctrl+f2\"], \"command\": \"toggle_bookmark\" },\n	{ \"keys\": [\"ctrl+shift+f2\"], \"command\": \"clear_bookmarks\" },\n	{ \"keys\": [\"alt+f2\"], \"command\": \"select_all_bookmarks\" },\n\n	{ \"keys\": [\"ctrl+shift+k\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete Line.sublime-macro\"} },\n\n	{ \"keys\": [\"alt+q\"], \"command\": \"wrap_lines\" },\n\n	{ \"keys\": [\"ctrl+k\", \"ctrl+u\"], \"command\": \"upper_case\" },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+l\"], \"command\": \"lower_case\" },\n\n	{ \"keys\": [\"ctrl+k\", \"ctrl+space\"], \"command\": \"set_mark\" },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+a\"], \"command\": \"select_to_mark\" },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+w\"], \"command\": \"delete_to_mark\" },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+x\"], \"command\": \"swap_with_mark\" },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+y\"], \"command\": \"yank\" },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+k\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete to Hard EOL.sublime-macro\"} },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"res://Packages/Default/Delete to Hard BOL.sublime-macro\"} },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+g\"], \"command\": \"clear_bookmarks\", \"args\": {\"name\": \"mark\"} },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+c\"], \"command\": \"show_at_center\" },\n\n	{ \"keys\": [\"ctrl++\"], \"command\": \"increase_font_size\" },\n	{ \"keys\": [\"ctrl+=\"], \"command\": \"increase_font_size\" },\n	{ \"keys\": [\"ctrl+keypad_plus\"], \"command\": \"increase_font_size\" },\n	{ \"keys\": [\"ctrl+-\"], \"command\": \"decrease_font_size\" },\n	{ \"keys\": [\"ctrl+keypad_minus\"], \"command\": \"decrease_font_size\" },\n\n	{ \"keys\": [\"ctrl+equals\"], \"command\": \"increase_font_size\" },\n	{ \"keys\": [\"ctrl+shift+equals\"], \"command\": \"decrease_font_size\" },\n	{ \"keys\": [\"ctrl+keypad_plus\"], \"command\": \"increase_font_size\" },\n	{ \"keys\": [\"ctrl+shift+keypad_plus\"], \"command\": \"decrease_font_size\" },\n\n	{ \"keys\": [\"alt+shift+w\"], \"command\": \"insert_snippet\", \"args\": { \"name\": \"Packages/XML/long-tag.sublime-snippet\" } },\n\n	{ \"keys\": [\"ctrl+shift+[\"], \"command\": \"fold\" },\n	{ \"keys\": [\"ctrl+shift+]\"], \"command\": \"unfold\" },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+1\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 1} },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+2\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 2} },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+3\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 3} },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+4\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 4} },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+5\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 5} },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+6\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 6} },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+7\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 7} },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+8\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 8} },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+9\"], \"command\": \"fold_by_level\", \"args\": {\"level\": 9} },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+0\"], \"command\": \"unfold_all\" },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+j\"], \"command\": \"unfold_all\" },\n	{ \"keys\": [\"ctrl+k\", \"ctrl+t\"], \"command\": \"fold_tag_attributes\" },\n\n	{ \"keys\": [\"context_menu\"], \"command\": \"context_menu\" },\n\n	{ \"keys\": [\"alt+c\"], \"command\": \"toggle_case_sensitive\", \"context\":\n		[\n			{ \"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true }\n		]\n	},\n	{ \"keys\": [\"alt+r\"], \"command\": \"toggle_regex\", \"context\":\n		[\n			{ \"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true }\n		]\n	},\n	{ \"keys\": [\"alt+w\"], \"command\": \"toggle_whole_word\", \"context\":\n		[\n			{ \"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true }\n		]\n	},\n	{ \"keys\": [\"alt+a\"], \"command\": \"toggle_preserve_case\", \"context\":\n		[\n			{ \"key\": \"setting.is_widget\", \"operator\": \"equal\", \"operand\": true }\n		]\n	},\n\n	// Find panel key bindings\n	{ \"keys\": [\"enter\"], \"command\": \"find_next\", \"context\":\n		[{\"key\": \"panel\", \"operand\": \"find\"}, {\"key\": \"panel_has_focus\"}]\n	},\n	{ \"keys\": [\"shift+enter\"], \"command\": \"find_prev\", \"context\":\n		[{\"key\": \"panel\", \"operand\": \"find\"}, {\"key\": \"panel_has_focus\"}]\n	},\n	{ \"keys\": [\"alt+enter\"], \"command\": \"find_all\", \"args\": {\"close_panel\": true},\n		 \"context\": [{\"key\": \"panel\", \"operand\": \"find\"}, {\"key\": \"panel_has_focus\"}]\n	},\n\n	// Replace panel key bindings\n	{ \"keys\": [\"enter\"], \"command\": \"find_next\", \"context\":\n		[{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n	},\n	{ \"keys\": [\"shift+enter\"], \"command\": \"find_prev\", \"context\":\n		[{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n	},\n	{ \"keys\": [\"alt+enter\"], \"command\": \"find_all\", \"args\": {\"close_panel\": true},\n		\"context\": [{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n	},\n	{ \"keys\": [\"ctrl+alt+enter\"], \"command\": \"replace_all\", \"args\": {\"close_panel\": true},\n		 \"context\": [{\"key\": \"panel\", \"operand\": \"replace\"}, {\"key\": \"panel_has_focus\"}]\n	},\n\n	// Incremental find panel key bindings\n	{ \"keys\": [\"enter\"], \"command\": \"hide_panel\", \"context\":\n		[{\"key\": \"panel\", \"operand\": \"incremental_find\"}, {\"key\": \"panel_has_focus\"}]\n	},\n	{ \"keys\": [\"shift+enter\"], \"command\": \"find_prev\", \"context\":\n		[{\"key\": \"panel\", \"operand\": \"incremental_find\"}, {\"key\": \"panel_has_focus\"}]\n	},\n	{ \"keys\": [\"alt+enter\"], \"command\": \"find_all\", \"args\": {\"close_panel\": true},\n		\"context\": [{\"key\": \"panel\", \"operand\": \"incremental_find\"}, {\"key\": \"panel_has_focus\"}]\n	},\n\n	// HTML, XML close tag\n	{ \"keys\": [\"/\"], \"command\": \"close_tag\", \"args\": { \"insert_slash\": true }, \"context\":\n		[\n			{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"(text.html, text.xml) - string - comment\", \"match_all\": true },\n			{ \"key\": \"preceding_text\", \"operator\": \"regex_match\", \"operand\": \".*<$\", \"match_all\": true },\n			{ \"key\": \"setting.auto_close_tags\" }\n		]\n	}\n]\n",
			"file": "/C/Users/j.pierreno/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 35717,
				"line_ending": "Windows",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "/D/lsw-build2-master/msys64/home/j.pierreno/.bashrc",
			"settings":
			{
				"buffer_size": 5878,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"utf-8\" />\n    <title>第8章 ～プロプロセッサと定数まとめ～</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/sanitize.css/2.0.0/sanitize.min.css\">\n    <link rel=\"stylesheet\" href=\"./css/style.css\">\n    <script src=\"./syntaxhighlighter/scripts/shCore.js\" type=\"text/javascript\"></script>\n    <script src=\"./syntaxhighlighter/scripts/shBrushPlain.js\" type=\"text/javascript\"></script>\n    <script src=\"./syntaxhighlighter/scripts/shBrushCpp_kai.js\" type=\"text/javascript\"></script>\n    <link href=\"./syntaxhighlighter/styles/shCore.css\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"./syntaxhighlighter/styles/shThemeMidnight_likeVS.css\" rel=\"stylesheet\" type=\"text/css\">\n    <script src=\"./scripts/common.js\" type=\"text/javascript\"></script>\n    <script type=\"text/javascript\">\n        SyntaxHighlighter.all();\n    </script>\n</head>\n<body>\n    <h1>第8章 ～プロプロセッサと定数まとめ～</h1>\n     <nav class=\"top\">\n        <ul>\n            <li><a href=\"./07roop_and_split_Sourcecode.html\" title=\"前頁\">prev</a></li>\n            <li><a href=\"index.html\" title=\"目次\">main</a></li>\n            <li><a href=\"./09standard_input_output.html\" title=\"次頁\">next</a></li>\n        </ul>\n    </nav>\n    <section>\n        <h2>プリプロセッサー</h2>\n        <p>\n            お待たせしました。ようやくプリプロセッサーのお話です。<br>\n            はい、#includeとかなにげに書いてきたものが何なのかわかります。<br>\n            はじめに言うと、今C++の規格はこのプリプロセッサのしごとをなるべくなくそうという方向になっています。なぜならばプリプロセッサには型の概念がないからです。<br>\n            このことにより思わぬ副作用を招くことがあり、またその記法の特殊さから<b>いずれ消え去る運命にある</b>ものと思われます。<br>\n            最もよく使う「#include」すら廃止しようという提案がC++に出されています(通るかは知らん) <br>\n            実際コンパイラー間の差異を吸収するためにつかう#defineとヘッダー読み込みに使う#include、ヘッダー二重読み込み防止の#pragma once以外は使う機会がないはずです。\n        </p>\n        <ul>\n            <li>#include</li>\n            <li>#define</li>\n            <li>#if/#else</li>\n            <li>#ifdef/#ifndef</li>\n            <li>#error</li>\n            <li>#warning</li>\n            <li>\n                #pragma\n                <ul>\n                    <li>#pragma once</li>\n                    <li>#pragma comment</li>\n                    <li>#pragma ident</li>\n                </ul>\n            </li>\n        </ul>\n        <p>\n            これだけ種類が有ります。解説するのは#includeと#define、#pragma once、#pragma commentにとどめます。他は<br>\n            <a href=\"http://itref.fc2web.com/c/preprocessor.html\">http://itref.fc2web.com/c/preprocessor.html</a><br>\n            を参照してください。とてもわかり易いので。なお、#if/#else/#ifdef/#ifndefはこれまでもこれからもしれっと使います。\n        </p>\n        <section>\n            <h3>#include</h3>\n            <p>.cとか.cppが読み込めないわけではないのですが、ほぼ100%ヘッダーファイルを読み込むのに使います。</p>\n            <pre class=\"brush: cpp;\">#include \"DxLib.h\"\n#include &lt;stdio.h&gt;</pre>\n            <p>\n                一般的なお話として、&lt;&gt;で囲むとコンパイラーの規定の場所とコンパイルオプションで指定した(gccなら-Iオプション)場所からヘッダーファイルを探します。<br>\n                また、\"\"で囲むと、それに加えて、#includeを書いたファイルと同じ場所も捜索対象になります。<br>\n                ゆえに自分で作ったヘッダーは\"\"で囲い、C/C++標準ライブラリ―のヘッダーは&lt;&gt;で囲むのが普通です。ありきたり。\n            </p>\n        </section>\n        <section>\n            <h3>#define</h3>\n            <p>しばしば、const, enumと並んで定数を作る、と言われますが、残念ながらいずれも定数ではありません。</p>\n            <p>#defineはコンパイル前にソースコードを置換するものです。で、「マクロ」と呼ばれます。Excelとかのマクロとはちと違うので注意です。</p>\n            <pre class=\"brush: cpp;\">#define WINDOW_HEIGH 1024</pre>\n            <p>こんな風に定数っぽいのを作ることもできますし</p>\n            <pre class=\"brush: cpp;\">#define MAX(A, B) (A > B)? A : B</pre>\n            <p>みたいに関数もどきも作れます。・・・がしかし、使いません。だってそれぞれ</p>\n            <pre class=\"brush: cpp;\">constexpr int WINDOW_HEIGH = 1024;//C++11\ntemplate&lt;typename T_&gt;\ninline T_ max(T_ a, T_ b){\n    return (a > b)? a : b;\n}</pre>\n            <p>のほうがわかりやすいじゃん。で、マクロを何に使うかというと、コンパイラー間の差異を吸収するために使います。どういうことでしょうか？</p>\n            <p>\n                最初に話したとおり、コンパイラーには何種類か有りますが、その中でも人口が多いVisual Studio C Compiler(以降VC)とGNU C Compiler(以降gcc)の２つだけ見ても、その差異は大きいです。<br>\n                例えばfloat型とdouble型の計算速度のところで出したサンプルコードを見てみましょう。\n            </p>\n            <pre class=\"brush: cpp; first-line: 4\">#if !defined (__GNUC__) || defined(__ICC) || defined(__clang__)\n#pragma comment(lib, \"setupapi.lib\")\n#pragma comment(lib, \"hid.lib\")\n#pragma comment(lib, \"winmm.lib\")\n#endif</pre>\n            <p>\n                ifndefというのはそのマクロ(この場合__GNUC__)が既に定義されているかを(プリプロセッサが)調べ、真なら対応するendifまでを有効にするものですが(偽ならその部分はコンパイラーに渡されない)<br>\n                あとで説明する通りgccは「#pragma comment」という書き方はできません。この場合だとコンパイルオプションに\n            </p>\n            <pre class=\"brush: plain\">-lsetupapi -lhid -lwinmm</pre>\n            <p>つけるわけですが・・・ってそんな話はよくって、対応してない機能をコンパイラーに渡すと当然コンパイルエラーになるのでこのようにgccコンパイラーでコンパイルする時を考えてこのように書いています。</p>\n            <p>すでに察しているかもしれませんが何も書かなくてもいくつかのマクロがdefineされています。例えばVCなら_MSC_VER、gccなら__GNUC__,__GNUC_MINOR__などがその代表的なものになります。</p>\n            <pre class=\"brush: cpp; first-line: 3;\" title=\"arikitari.h\">#if (defined(_MSC_VER) &amp;&amp; _MSC_VER > 1000) || (defined(__clang__) &amp;&amp; (__clang_major__ > 3 || (__clang_major__ == 3 &amp;&amp; __clang_minor__ > 2))) ||(defined(__ICC) &amp;&amp; __ICC > 1000) ||defined (__GNUC__) &amp;&amp; !defined(__ICC) &amp;&amp; !defined(__clang__) &amp;&amp; (__GNUC__ >= 4 || (__GNUC__ == 3 &amp;&amp; __GNUC_MINOR__ >= 4))\n#pragma once\n#endif</pre>\n            <p>\n                ヘッダーファイルに分ける、のところで書いたこの文の意味も今なら分かるでしょう。<br>\n                #pragma onceという書き方に対応したのがVisual Studio.NET 2003以降、gcc3.4以降、clang3.3(3.2でバグが有ったっぽい)以降、Intel C Compiler10.00以降だからです。\n            </p>\n            <p>\n                どのコンパイラーで何が定義されているかは<br>\n                C/C++ tip: How to detect the compiler name and version using compiler predefined macros | Nadeau Software<br>\n                <a href=\"http://nadeausoftware.com/articles/2012/10/c_c_tip_how_detect_compiler_name_and_version_using_compiler_predefined_macros\">http://nadeausoftware.com/articles/2012/10/c_c_tip_how_detect_compiler_name_and_version_using_compiler_predefined_macros</a><br>\n                の解説が非常に詳しくわかりやすいです。\n            </p>\n            <table>\n                <tbody>\n                    <tr><th>コンパイラ</th><th>_MSC_VER値</th><th>備考</th></tr>\n                    <tr><td>C Compiler 6.0</td><td style=\"text-align: center;\">600</td><td></td></tr>\n                    <tr><td>C/C++ Compiler 7.0</td><td style=\"text-align: center;\">700</td><td></td></tr>\n                    <tr><td>Visual C++ 1.0</td><td style=\"text-align: center;\">800</td><td></td></tr>\n                    <tr><td>Visual C++ 2.0</td><td style=\"text-align: center;\">900</td><td></td></tr>\n                    <tr><td>Visual C++ 4.0</td><td style=\"text-align: center;\">1000</td><td></td></tr>\n                    <tr><td>Visual C++ 4.1</td><td style=\"text-align: center;\">1010</td><td></td></tr>\n                    <tr><td>Visual C++ 4.2</td><td style=\"text-align: center;\">1020</td><td></td></tr>\n                    <tr><td>Visual C++ 5.0 (Visual Studio 97)</td><td style=\"text-align: center;\">1100</td><td></td></tr>\n                    <tr><td>Visual C++ 6.0 (Visual Studio 6.0)</td><td style=\"text-align: center;\">1200</td><td></td></tr>\n                    <tr><td>Visual C++ 7.0 (Visual Studio.NET 2002)</td><td style=\"text-align: center;\">1300</td><td></td></tr>\n                    <tr><td>Visual C++ 7.1 (Visual Studio.NET 2003)</td><td style=\"text-align: center;\">1310</td><td></td></tr>\n                    <tr><td>Visual C++ 8.0 (Visual Studio 2005)</td><td style=\"text-align: center;\">1400</td><td></td></tr>\n                    <tr><td>Visual C++ 9.0 (Visual Studio 2008)</td><td style=\"text-align: center;\">1500</td><td></td></tr>\n                    <tr><td>Visual C++ 10.0 (Visual Studio 2010)</td><td style=\"text-align: center;\">1600</td><td>stdint.h使用可</td></tr>\n                    <tr><td>Visual C++ 11.0 (Visual Studio 2012)</td><td style=\"text-align: center;\">1700</td><td><a href=\"http://msdn.microsoft.com/ja-jp/library/vstudio/hh567368.aspx\">出典</a></td></tr>\n                    <tr><td>Visual C++ 12.0 (Visual Studio 2013)</td><td style=\"text-align: center;\">1800</td><td><a href=\"http://stackoverflow.com/questions/70013/how-to-detect-if-im-compiling-code-with-visual-studio-2008\">出典</a></td></tr>\n                    <tr><td>Visual C++ 13.0 (Visual Studio 2015)</td><td style=\"text-align: center;\">1900</td><td>RC版は1900だった<a href=\"http://www.reddit.com/r/cpp/comments/2786nw/visual_studio_14_ctp_visual_c_team_blog/\">出典</a></td></tr>\n                </tbody>\n            </table>\n        </section>\n        <section>\n            <h3>#pragma comment</h3>\n            <p>なんかすでに使っているので解説が必要か疑問ですが、.libファイルや.aファイルをリンカーにくっつけて、とお願いするために使います。ただし先述の通りVCやclang,bcc等限定の機能になります。</p>\n            <p>なのでgccでコンパイルする予定があるなら(常にその可能性を想定するべきですが)さっきのような対策が必要です。</p>\n        </section>\n        <section>\n            <h3>#pragma onceとインクルードガード</h3>\n            <p>その昔#pragma onceが使えなかった頃、ヘッダーファイルが複数読み込まれると、2重定義です、と言われコンパイルエラーになりました。この対策として</p>\n            <pre class=\"brush: cpp;\">#ifndef _INC_STDIO\n#define _INC_STDIO\n//ヘッダーファイルの中身を書く\n#endif /* _INC_STDIO */</pre>\n            <p>といったことをしていました。こういう書き方をインクルードガードといいます。でもこんなの書くのはめんdいですよね？そこで生まれたのが#pragma onceです。</p>\n            <p>ヘッダーファイルの冒頭に</p>\n            <pre class=\"brush: cpp;\">#pragma once</pre>\n            <p>と書くだけです。</p>\n            <p>ただし、普通は#defineを使ったインクルードガードと併用します。その理由は実際に使っていれば分かるはず。複数のヘッダーで同じことを書かないといけない時にこれがあると便利なんです。</p>\n        </section>\n        <section>\n            <h3>#pragma warning</h3>\n            <p>実例を見たほうが早いでしょう。プログラムはAviUtlプラグインで有名な透過性ロゴフィルター(makki氏)のSIMD化版(rigaya氏)の一部です。</p>\n            <pre class=\"brush: cpp; highlight:[11,12];\">#pragma warning (push)\n#pragma warning (disable: 4244) //C4244: '=' : 'int' から 'short' への変換です。データが失われる可能性があります。\nstatic BOOL create_adj_exdata(FILTER *fp, LOGO_HEADER *adjdata, const LOGO_HEADER *data)\n{\n	int i, j;\n	if (data == NULL)\n		return FALSE;\n	// ロゴ名コピー\n	memcpy(adjdata->name, data->name, LOGO_MAX_NAME);\n	// 左上座標設定（位置調整後）\n	adjdata->x = data->x + (int)(fp->track[LOGO_X]-LOGO_XY_MIN)/4 + LOGO_XY_MIN/4;\n	adjdata->y = data->y + (int)(fp->track[LOGO_Y]-LOGO_XY_MIN)/4 + LOGO_XY_MIN/4;\n	//中略\n	return TRUE;\n}\n#pragma warning (pop)</pre>\n            <p>\n                このプログラムでは11,12行目がint型からshorに暗黙の型変換を行おうとしているのでコンパイル警告が出ます。<br>\n                もしshort型で表せない大きさのデータだったら正常に変換できないのでこの警告はもっともな話です。むしろ警告してくれてありがとうです。<br>\n                しかし、作者曰くこの場合はそうはならないらしいです。だとすればその警告は目障りです。なのでこのように#pragma warningを使って警告を消しています。<br>\n                ただしプログラム全体でその警告が消えると不都合なので、この関数だけ警告が消えるように#pragma warning (push)/(pop)しています。\n            </p>\n            <p>\n                ただしこの書き方はVCの書き方でgccだとまた書き方が違います。<br>\n                VCだと警告番号ですがgccやclangだと警告の種類を指定するようです。<br>\n                warning | MSDN<br>\n                <a href=\"https://msdn.microsoft.com/ja-jp/library/2c8f766e.aspx\">https://msdn.microsoft.com/ja-jp/library/2c8f766e.aspx</a><br>\n                Diagnostic Pragmas - Using the GNU Compiler Collection (GCC)<br>\n                <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Pragmas.html\">https://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Pragmas.html</a><br>\n                controlling diagnostics via pragmas | clang 3.7 documentation<br>\n                <a href=\"http://clang.llvm.org/docs/UsersManual.html#controlling-diagnostics-via-pragmas\">http://clang.llvm.org/docs/UsersManual.html#controlling-diagnostics-via-pragmas</a>\n            </p>\n            <pre class=\"brush: cpp;\" title=\"VC\">#pragma warning (push)\n#pragma warning (disable: [警告番号])\n    //警告を無効にする部分のコード\n#pragma warning (pop)</pre>\n            <pre class=\"brush: cpp;\" title=\"gcc\">#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"[警告の種類]\"\n    //警告を無効にする部分のコード\n#pragma GCC diagnostic pop</pre>\n            <pre class=\"brush: cpp;\" title=\"clang\">#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"[警告の種類]\"\n    //警告を無効にする部分のコード\n#pragma clang diagnostic pop</pre>\n            <p>\n                大事なことを言います。本来警告が出たら出ないようなコードを書くべきなのです。このように警告を消したり、キャストして警告を消すのはやってはいけません。<br>\n                なんどでもいいますが、本来は「警告を出していただき、コンパイラー様、ありがとうございます」なのです。<br>\n                明確に問題ない、と言える警告を除き、警告を消すことのないようにしましょう。\n            </p>\n        </section>\n    </section>\n    <section>\n        <h2>定数</h2>\n        <p>C/C++における定数はC++11まで含めると5つあります。ただ、定数と一口にいっても3つに大きく分かれます。</p>\n        <dl>\n            <dt>実行時定数</dt>\n            <dd>プログラムの実行中に変数を読み取り専用にすることで、書き換えができなくなるようにするもの</dd>\n            <dd>ex.)const</dd>\n            <dt>コンパイル時定数</dt>\n            <dd>コンパイル時に値を決定できるので計算してしまい単なる数値などのリテラルにするもの</dd>\n            <dd>ex.)enum X { ver = 0}, constexpr, enum class</dd>\n            <dt>プリプロセス時定数</dt>\n            <dd>プリプロセス時に値を決定できるのでソースコードを置換してしまうもの</dd>\n            <dd>ex.)#define</dd>\n        </dl>\n        <p>ではそれぞれ見て行きましょう。</p>\n        <section>\n            <h3>const</h3>\n            <p>constは例えばこんなふうに書けるのでした。</p>\n<pre class=\"brush: cpp;\">const int x = 7;\n</pre>\n            <p>\n                ところで変数は関数のスタック上に確保されるのでした。<br>\n                <code>int</code>型のように小さい型ならいいのですが、この後出てくる構造体や大きな配列は大きいサイズなので、(まずないと思いますが)スタックを使い尽くすことがあるかもしれません。<br>\n                そこで\n            </p>\n<pre class=\"brush: cpp;\">static const int x = 7;</pre>\n            <p>\n                のように<code>static</code>をつけるといいです。<code>static</code>変数の生存期間はスコープに左右されず(だってスタックに積まれないもん)プログラムの開始から終了までとなります。<br>\n                中には<code>const</code>をつけるなら<code>static const</code>にするべきだ、という宗教も存在しますが、マルチスレッドや、非同期処理やポインタがからむと話が厄介になるのでおすすめしません。\n            </p>\n            <p class=\"strong\">第一いちいち<code>static</code>って書くなんてめんdじゃないですか。</p>\n            <p>\n                一方で<b>関数の外に書く場合は</b>、グローバル変数(どこからでもアクセスできる変数)になるのを防ぐために<b>必ず<code>static</code>をつけるべき</b>です。<br>\n                こうすることで有効範囲がそのファイルに限定されます。includeしても使えません。<br>\n                <code>constexpr</code>あるんだからそんな場面ないと思いますが。\n            </p>\n        </section>\n        <section>\n            <h3> #define</h3>\n            <p>これはプリプロセッサマクロで、例えばこんなふうに書けるのでした。</p>\n<pre class=\"brush: cpp;\">#define var 5 </pre>\n            <p>ところで<code>#define</code>マクロにはいくつかの問題点があり、コンパイラー間の差異やターゲット環境の差異を吸収する時を除き使うことはありません。当然定数として使うこともありません。では問題点を見て行きましょう。</p>\n            <section>\n                <h4>型がないことに起因する冗長さ</h4>\n                <p>\n                    verに型はありません。C++ではオーバーロードという、変数の型によって同名の関数とかとかを呼び分ける機能があるのでこれでは困ります。<br>\n                    C言語でもC11で型判定マクロが導入されたので対岸の火事ではありません。\n                </p>\n                <pre class=\"brush: cpp;\">//int16_t型はshort型、int32_t はint型、int64_t型はlong long型と仮定する\nint64_t add(int32_t a, int32_t b);\nint32_t add(int16_t a, int16_t b);\n#define ver1 5\n#define ver2 10\nint main(void){\n    auto x = add(ver1, ver2);\n    return 0;\n}</pre>\n                <p>ここでxの型は何でしょうか？正解はlong long型です。つまり関数addは上のほうが呼ばれています。では下の方を呼ぶには？</p>\n                <pre class=\"brush: cpp; first-line: 7;\">auto x = add(static_cast&lt;int16_t>(ver1), static_cast&lt;int16_t&gt;(ver2));</pre>\n                <p>冗長でしょ。<code>constexpr</code>使えば</p>\n                <pre class=\"brush: cpp;\">int64_t add(int32_t a, int32_t b);\nint32_t add(int16_t a, int16_t b);\nconstexpr int16_t ver1 = 5;\nconstexpr int16_t ver2 = 10;\nint main(void){\n    auto x = add(ver1, ver2);\n    return 0;\n}</pre>\n                <p>すっきり。</p>\n            </section>\n            <section>\n                <h4>単なるソースコード置換であることに起因する問題</h4>\n                <p>早速例を見ましょう。</p>\n                <pre class=\"brush: cpp;\">#define BASE_SIZE 1 &lt;&lt; 8\nint main(void){\n    auto tmp = BASE_SIZE + 4;\n    return 0;\n}</pre>\n                <p>tmpの型はいうまでもなく<code>int</code>ですね。で、tmpには何が入るでしょうか？260？いえいえ、4096です。なぜならばこれは以下のように置換されるからです。</p>\n                <pre class=\"brush: cpp;\">auto tmp = 1 &lt;&lt; 8 + 4;</pre>\n                <p>つまり</p>\n                <pre class=\"brush: cpp;\">auto tmp = 1 &lt;&lt; 12;</pre>\n                <p>となっています。まあ、この場合は</p>\n                <pre class=\"brush: cpp;\">#define BASE_SIZE (1 &lt;&lt; 8)</pre>\n                <p>とすればいいんですけどね。めんdでしょ。きっと忘れるし。今回の例の場合は回避方法は2通りですかね</p>\n                <pre class=\"brush: cpp;\">static const unsigned int BASE_SIZE = 1 &lt;&lt; 8;\nconstexpr unsigned int BASE_SIZE = 1 &lt;&lt; 8;</pre>\n            </section>\n            <section>\n                <h4>置換がプロプロセス時であることに起因する問題</h4>\n                <p>#defineの値はコンパイルより前、プリプロセス時に置換されます。なのでコンパイラーには変数名がわからないのです。これによりコンパイルエラーなどで原因究明が著しく困難になります。</p>\n            </section>\n            <section>\n                <h4>スコープがないことに起因する問題</h4>\n                <p>\n                    #defineとenum以外はすべてスコープの概念があります。<br>\n                    スコープの概念がないと何が問題かというと、#defineに関して言えば書いたファイルとそれをincludeしているファイルでその名前が消費されるので、変数名の衝突が起こしやすくなります。\n                </p>\n            </section>\n        </section>\n        <section>\n            <h3>enum</h3>\n            <p>enumを使った定数っぽい書き方はこんな感じでした。</p>\n            <pre class=\"brush: cpp;\">enum { var = 5 };\nint main(void){\n    int tmp1 = var;\n}</pre>\n            <p>しかしこれにも問題点が有ります。</p>\n            <section>\n                <h4>冗長</h4>\n                <p>定数を使いたいだけなのに書く量がおおく、普通の変数宣言と書き方が少し違う。そもそも幾つもの関連のある定数もどきを列挙して宣言するためのものなんだから、なにか間違っている</p>\n            </section>\n            <section>\n                <h4>スコープがない</h4>\n                <p>#defineと同じ理由なので以下略。</p>\n            </section>\n        </section>\n        <section>\n            <h3>enum class(scoped enumeration)</h3>\n            <p>enum　classを使った定数っぽい書き方はこんな感じでした。</p>\n            <pre class=\"brush: cpp;\">enum class tag{ var = 5 };\nint main(void){\n    int tmp1 = static_cast&lt;int&gt;(tag::var);\n}</pre>\n            <p>しかしこれにも問題が有ります。</p>\n            <section>\n                <h3>冗長</h3>\n                <p>キャストを無駄に強いる。それが便利なこともあるだろうけど、なんか間違っている気がする。あとはenumと同様。</p>\n            </section>\n        </section>\n        <section>\n            <h3>constexpr</h3>\n            <p>これはC++11で導入された記法でコンパイル時定数を作るために導入されました。既に何度か使用していますが改めて。書き方は</p>\n            <pre class=\"brush: cpp;\">constexpr unsigned long tmp = 32;</pre>\n            <p>\n                です。すっきり。コンパイル時定数なのでこの後習う配列や、template、static_assartにも使用できます。\n                が、C++で定数を返す関数もこれに対応しているはずなんですけど、Visual Studio 2013 Novenber 2013 CTPでは対応しない。VC2015使えってことね。\n            </p>\n\n<pre class=\"brush: cpp;\">\nconstexpr size_t tmp = 32;\nint tmp[tmp];\nstatic_assert(2147483647L &lt;= std::numeric_limits&lt;int&gt;::max(), “”);//VC2015以降\n</pre>\n            <p>\n                <code>constexpr</code>に関する非常にわかりやすく、詳しい解説はこちら<br>\n                <a href=\"http://www.slideshare.net/GenyaMurakami/onstexprcpu\">constexpr関数はコンパイル時処理。これはいい。実行時が霞んで見える。cpuの嬌声が聞こえてきそうだ</a><br>\n                 from <a href=\"//www.slideshare.net/GenyaMurakami\">Genya Murakami</a>\n            </p>\n            <iframe src=\"http://www.slideshare.net/slideshow/embed_code/key/pH1NfxbtZFSoHF\" width=\"510\" height=\"420\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe>\n            <section>\n                <h4>constexprとrVarue reference</h4>\n                <p>\n                    クラスを作るまでお世話になることはありませんが、C++にはrVarue Referenceという物があります。<br>\n                    こいつとこの<code>constexpr</code>を組み合わせるとC++11の範囲だと正常に<code>std::move</code>できないそうです。<br>\n                    この辺についてはこのテキストではほとんど解説しないので、<a href=\"./15value.html\">rvarueの解説</a>の参考リンクを参照してください。<br>\n                    constexprとrvalue参照問題 - とくにあぶなくないRiSKのブログ<br>\n                    <a href=\"http://sscrisk.hatenablog.com/entry/2014/05/31/constexpr%E3%81%A8rvalue%E5%8F%82%E7%85%A7%E5%95%8F%E9%A1%8C\">http://sscrisk.hatenablog.com/entry/2014/05/31/constexprとrvalue参照問題</a>\n                </p>\n            </section>\n        </section>\n        <section>\n            <h3>まとめ</h3>\n            <ul>\n                <li>実行中に定数に(Read-Only)にしたいならconst</li>\n                <li>コンパイル時定数が作りたいなら<code>constexpr</code></li>\n                <li>ポインターを取る必要があるならconst</li>\n            </ul>\n            <p>を使う。実にスッキリした結論。C++最高！</p>\n        </section>\n        <p>\n            参考サイト<br>\n            定数の定義は，const intか，#defineか，それとも - わさっき<br>\n            <a href=\"http://d.hatena.ne.jp/takehikom/20140807/1407420548\">http://d.hatena.ne.jp/takehikom/20140807/1407420548</a><br>\n            #defineの罠<br>\n            <a href=\"http://www.geocities.co.jp/bleis_tift/cpp/baddefine.html\">http://www.geocities.co.jp/bleis_tift/cpp/baddefine.html</a><br>\n            C言語のマクロの注意点<br>\n            <a href=\"http://www.c-lang.org/detail/macro_caution.html\">http://www.c-lang.org/detail/macro_caution.html</a>\n        </p>\n    </section>\n    <nav class=\"bottom\">\n        <ul>\n            <li><a href=\"./07roop_and_split_Sourcecode.html\" title=\"前頁\">prev</a></li>\n            <li><a href=\"index.html\" title=\"目次\">main</a></li>\n            <li><a href=\"./09standard_input_output.html\" title=\"次頁\">next</a></li>\n        </ul>\n    </nav>\n</body>\n</html>",
			"file": "08preprocess_and_constant.html",
			"file_size": 29548,
			"file_write_time": 130868992392652032,
			"settings":
			{
				"buffer_size": 20577,
				"line_ending": "Windows",
				"scratch": true
			}
		},
		{
			"file": "syntaxhighlighter/scripts/shBrushCpp.js",
			"settings":
			{
				"buffer_size": 5284,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "key",
		"selected_items":
		[
			[
				"key",
				"FindKeyConflicts: All Conflicts"
			],
			[
				"pains",
				"Package Control: Install Package"
			],
			[
				"data",
				"DataConverter: to text table"
			],
			[
				"findke",
				"FindKeyConflicts: All Conflicts"
			],
			[
				"pain",
				"Package Control: Install Package"
			],
			[
				"datah",
				"DataConverter: to HTML table"
			],
			[
				"datach",
				"DataConverter: to HTML table"
			],
			[
				"datac",
				"DataConverter: to Perl"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: List Packages"
			],
			[
				"packins",
				"Package Control: Install Package"
			],
			[
				"keyco",
				"FindKeyConflicts: All Conflicts"
			],
			[
				"pacins",
				"Package Control: Install Package"
			],
			[
				"Pacage",
				"Package Control: Install Package"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"emm",
				"Set Syntax: Emmet"
			],
			[
				"mak",
				"Set Syntax: Markdown Extended"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"mark",
				"Set Syntax: Markdown Extended"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"ma",
				"Set Syntax: Markdown Extended"
			],
			[
				"syna",
				"Set Syntax: Markdown"
			],
			[
				"pakage Control:remo",
				"Package Control: Remove Package"
			],
			[
				"",
				"BracketHighlighter: Jump to Right Bracket"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"markdown",
				"Set Syntax: Markdown Light"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 528.0
	},
	"console":
	{
		"height": 175.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/user/documents/git/2015_C_Textbook"
	],
	"file_history":
	[
		"/C/Users/j.pierreno/AppData/Roaming/Sublime Text 3/Packages/Alignment/Default (Windows).sublime-keymap",
		"/D/user/movies/amarec/720x408_30fps_48000Hz.aup",
		"/C/Users/j.pierreno/AppData/Roaming/Sublime Text 3/Packages/MarkdownEditing/Default (Windows).sublime-keymap",
		"/C/Users/j.pierreno/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
		"/D/user/documents/git/2015_C_Textbook/syntaxhighlighter/scripts/shBrushCpp_kai.js",
		"/D/user/documents/git/2015_C_Textbook/src/strlen/strlen/strlen.h",
		"/D/user/documents/git/2015_C_Textbook/src/insertaion_sort.cpp",
		"/D/user/documents/git/2015_C_Textbook/src/001_arikitari_na_world.c",
		"/D/user/documents/git/Junk/CppJunk/CppJunk/randseq.cpp",
		"/D/user/documents/git/Junk/CppJunk/CppJunk/randseq.hpp",
		"/D/lsw-build2-master/msys64/home/j.pierreno/.bashrc",
		"/C/Users/j.pierreno/Desktop/randseq.cpp",
		"/C/Users/j.pierreno/Desktop/randseq.hpp",
		"/C/Users/j.pierreno/Desktop/intel_vga_4281_64(www.station-drivers.com)/mup.xml",
		"/D/lsw-build2-master/bld_ffmpeg.sh",
		"/C/Users/yumetodo/Desktop/zxing.md",
		"/D/lsw-build2-master/msys2_dl_wget.bat",
		"/C/Users/yumetodo/Desktop/insertaion_sort.cpp",
		"/C/Users/yumetodo/Desktop/link_bio.txt",
		"/D/lsw-build2-master/FirstAutomatedBld.vbs",
		"/C/Users/yumetodo/Documents/著作権法第二条(定義)第1項9号の5_indented.txt",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/15value.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/syntaxhighlighter/styles/shCore.css",
		"/C/Users/yumetodo/Documents/Visual Studio 2015/Projects/クイズ　～あなたはパティシエ～/神御田の料理クイズ（仮）v2/main.cpp",
		"/C/Users/yumetodo/Desktop/et.c",
		"/C/Users/yumetodo/Documents/git/xml_test_cooking_quiz/GNUmakefile",
		"/C/Users/yumetodo/Documents/git/xml_test_cooking_quiz/error.txt",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/strstr/GNUmakefile",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/double_vs_float/GNUmakefile",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/book_list_storage/GNUmakefile",
		"/C/msys64/mingw64/include/llvm/Support/WindowsError.h",
		"/C/Users/yumetodo/Documents/git/xml_test_cooking_quiz/GNUmakefile.GNUmakefile",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/strcmp/GNUmakefile",
		"/C/Users/yumetodo/Documents/git/xml_test_cooking_quiz/xml_test_cooking_quiz.sln",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/19str_manipulate.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/strcmp/strcmp/strcmp.cpp",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/strlen/strlen/strlen.h",
		"/C/lib/zxing/cpp/README.md",
		"/C/lib/zxing/qt/README.txt",
		"/C/lib/zxing/NOTICE",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/18c_char_str_base.html",
		"/C/Users/yumetodo/AppData/Roaming/Sublime Text 3/Packages/User/bh_wrapping.sublime-settings",
		"/C/Users/yumetodo/AppData/Roaming/Sublime Text 3/Packages/BracketHighlighter/bh_wrapping.sublime-settings",
		"/C/Users/yumetodo/Desktop/divisions_sales.cpp",
		"/C/Users/yumetodo/Desktop/eval.cpp",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/strpbrk.c",
		"/C/Users/yumetodo/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/yumetodo/Desktop/ideone_nDXQZO.c",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/mtrand32/mtrand32/rdrand64.asm",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/2015_C_Textbook.sublime-workspace",
		"/C/Users/yumetodo/Desktop/SampleProject/src/sample/Main.java",
		"/C/Users/yumetodo/Desktop/ideone_qXNhlI.cpp",
		"/C/Users/yumetodo/Desktop/addressbook-complete/FriendTreeView.cpp",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/index.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/13structure.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/08preprocess_and_constant.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/14pointer.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/11c_array.html",
		"/C/Users/yumetodo/Google ドライブ/share_神御田_yumetodo/神御田→yumetodo/DxLib Project4/Win32DxLibProject1/main.cpp",
		"/C/Users/yumetodo/Google ドライブ/share_神御田_yumetodo/yumetodo→神御田/ConsoleApplication2/ConsoleApplication2/main.cpp",
		"/C/Users/yumetodo/Documents/Visual Studio 2013/Projects/dxlib/DxLib Project2/DxLib Project2/Source.cpp",
		"/C/Users/yumetodo/Documents/Visual Studio 2013/Projects/dxlib/DxLib Project3/DxLib Project3/Source.cpp",
		"/C/Users/yumetodo/Documents/Visual Studio 2013/Projects/dxlib/Test3/Test3/Source.cpp",
		"/C/Users/yumetodo/Documents/Visual Studio 2013/Projects/dxlib/Test3/Test3.sln",
		"/C/Users/yumetodo/Documents/Visual Studio 2013/Projects/dxlib/Test4/Test4/Source.cpp",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/css/style.css",
		"/C/Users/yumetodo/Desktop/calender.cpp",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/02variable.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/03calc.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/05function.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/09standard_input_output.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/number_guessing_game/number_guessing_game/Source.cpp",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/stdin/stdin/Source.c",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/syntaxhighlighter/scripts/shBrushCpp_kai.js",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/mtrand32/GNUmakefile",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/stdin/GNUmakefile",
		"/C/Users/yumetodo/Documents/test.html",
		"/C/Users/yumetodo/Documents/normalize_adress.gs.js",
		"/C/Users/yumetodo/AppData/Roaming/Sublime Text 3/Packages/User/Emmet.sublime-settings",
		"/C/Users/yumetodo/AppData/Roaming/Sublime Text 3/Packages/Emmet/Emmet.sublime-settings",
		"/C/Users/yumetodo/AppData/Roaming/Sublime Text 3/Packages/User/SideBarEnhancements/Open With/Side Bar.sublime-menu",
		"/C/msys64/mingw64/x86_64-w64-mingw32/include/windows.h",
		"/C/msys64/mingw32/x86_64-w64-mingw32/include/stdlib.h",
		"/C/msys64/mingw32/i686-w64-mingw32/include/stdlib.h",
		"/C/msys64/mingw32/i686-w64-mingw32/include/sec_api/stdlib_s.h",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/strlen/strlen/main.cpp",
		"/C/Users/yumetodo/Desktop/tet.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/scripts/common.js",
		"/C/msys64/mingw64/x86_64-w64-mingw32/include/uchar.h",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/strlen/strlen/strlen.cpp",
		"/C/Users/yumetodo/Documents/Visual Studio 2015/Projects/getcudir_unix/getcudir_unix/mytchar.h",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/strlen/GNUmakefile",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/07roop_and_split_Sourcecode.html",
		"/C/Users/yumetodo/Documents/git/biboro_angularjs/js/controllers.js",
		"/C/msys64/mingw32/include/c++/4.9.2/parallel/numeric",
		"/C/msys64/mingw64/include/c++/4.9.2/numeric",
		"/C/msys64/mingw64/include/c++/4.9.2/parallel/numeric",
		"/C/Users/yumetodo/Documents/Visual Studio 2015/Projects/make_array/GNUmakefile",
		"/C/Users/yumetodo/Documents/Visual Studio 2015/Projects/make_array/make_array/GNUmakefile",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/00the_first_step.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/04bit.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/17rand-num.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/16Range-base_for.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/12m.d.c_array.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/10introduction_of_pointer.html",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/06conditional_state.html",
		"/C/Users/yumetodo/Documents/git/liwe_review/style.css",
		"/C/Users/yumetodo/Documents/git/liwe_review/with_jCanvas.js",
		"/C/Users/yumetodo/Documents/git/liwe_review/with_jCanvas.html",
		"/C/Users/yumetodo/Documents/git/liwe_review/README.md",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/2015_C_Textbook.sublime-project",
		"/C/Users/yumetodo/Desktop/link.txt",
		"/C/Users/yumetodo/Documents/git/liwe_review/yumetodo_edit_file.sublime-project",
		"/C/Users/yumetodo/Desktop/jQuerySample/006_jquery_jcanvas_layer2.html",
		"/C/Users/yumetodo/Desktop/jQuerySample/007_jquery_jcanvas_event.html",
		"/C/Users/yumetodo/Desktop/jQuerySample/002_jquery_jcanvas.html",
		"/C/Users/yumetodo/Documents/git/liwe_review/test.html",
		"/C/msys64/mingw32/lib/gcc/x86_64-w64-mingw32/4.9.2/include/c++/random",
		"/C/msys64/mingw32/lib/gcc/x86_64-w64-mingw32/4.9.2/include/x86intrin.h",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/prime_number_generator/GNUmakefile",
		"/C/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h",
		"/C/msys64/mingw32/lib/gcc/x86_64-w64-mingw32/4.9.2/include/immintrin.h",
		"/C/Users/yumetodo/Desktop/GNUmakefile",
		"/C/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/4.9.2/include/cpuid.h",
		"/C/msys64/mingw64/lib/clang/3.6.1/include/immintrin.h",
		"/C/msys64/home/yumetodo/.bashrc",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/src/Multidimensional_array/GNUmakefile",
		"/C/Users/yumetodo/Documents/2015_C_Textbook/syntaxhighlighter/scripts/shBrushJScript.js"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"reindent",
			"indent",
			"ctrl+alt",
			"ctrl+shift+r",
			"indent",
			"color",
			"ls",
			"basic_random_access_handle",
			"RandomAccessHandleService",
			"native_handle_type",
			"Tag",
			"noexcept",
			"winerror.h",
			"Debug",
			"神御田の料理クイズ（仮）v3",
			"strcmp",
			"&",
			"#include <",
			"<",
			"<T_>",
			"template<",
			"#include <",
			"<",
			"<T_>",
			"<",
			"<<",
			"<T_>",
			"#include <",
			"<section style=\"height: 200px;overflow-y: scroll;\">",
			"<<",
			"#include <",
			"&&",
			"#include <",
			"&&",
			"#include <",
			"<<",
			"#include <",
			"&&",
			"<< ",
			"auto",
			"template<",
			"SYMBOL",
			"/* title */",
			" /* set_poss */",
			" /* main */",
			" /* while */",
			" /* if1 */",
			" /* then1 */",
			" /* if */",
			" /* then */",
			"SYMBOL",
			"%ld",
			"re",
			"list*",
			"new_list_elem_",
			"new_p",
			"re",
			"printf",
			"error",
			"return INT_MIN",
			"struct list",
			"WGET",
			"CMD_WGET",
			"insert_place",
			"str ",
			"str",
			"SYMBOL",
			"insert_place",
			"str",
			"re",
			"fraction",
			"struct fraction",
			"put_data",
			"j",
			"error",
			"return UINT_MAX",
			"INT_MIN",
			"count",
			"file_count_to",
			"error_count",
			"ext_name",
			"FD_get",
			"FALSE",
			"TRUE",
			"FD_get",
			"moji",
			"exit(1)",
			"backup_check",
			"dr",
			"bw",
			"cout",
			"	public :",
			"	private :",
			"BOOST_STATIC_ASSERT\\(\\(([^\\(\\)]+)\\)\\)",
			" template",
			"generate_max",
			"table_of_time_required.size()",
			"SYMBOL",
			"auto",
			"input<uint32_t>",
			"EOF",
			"EOFのときはEOF",
			"INT_MIN",
			"　",
			"re",
			"、",
			"alocated_children_num",
			"eval_str_arr_num",
			"s_last",
			"s_front",
			"new_char_ptr",
			"s_end",
			"s_begin",
			"s",
			"ibuf_size",
			"tmp",
			"j",
			"tmp",
			"buf",
			"tag_eval_store",
			"decltype(arr)::value_type",
			"secon",
			"T_",
			"void",
			"enum { value = 0 };",
			"i",
			"SN - 2",
			"+ ="
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"<section class=\"scroll_box\">",
			"template&lt;",
			"str_arr ",
			"static_assert($1)",
			"template",
			"\", \"",
			"static constexpr bool value = false;",
			" = ",
			"!=",
			" {",
			", ",
			" < ",
			" = ",
			" - ",
			", ",
			"\\n",
			"putchar('\\n');",
			"-",
			"",
			"\\n",
			"&lt;T>",
			"&amp;&amp;",
			"&lt;T>",
			"&lt;rand_type>",
			"template &lt;",
			"&amp;&amp;",
			" ",
			"\" +",
			" ",
			"\"$1\",",
			"\\r",
			"&lt;uint>",
			"#include &lt;",
			"template&lt;",
			"&lt;T_>",
			"ev_state_c&amp;",
			"&amp;&amp;",
			"&lt;&lt;",
			" &lt; ",
			"&lt;&lt;",
			"&amp;&amp;",
			"&amp;",
			"ev_state_c&amp;",
			"_",
			"&amp;&amp;",
			"&lt;&lt;",
			"#include &lt;",
			"template&lt;",
			"_cast&lt;",
			"_cast<&lt;",
			"template<&lt;",
			" &lt; ",
			" &amp; ",
			"&lt;&lt;",
			"&amp;&amp;",
			"&lt;&lt;",
			"&amp;&amp;",
			"&lt;&lt;",
			" &amp; ",
			"&lt;&lt;",
			") &amp; ",
			"&amp;&amp;",
			" &lt; ",
			"&lt;&lt;",
			" &lt; ",
			"&lt;&lt;",
			"std::exception&amp; ",
			" &lt; ",
			"std::exception&amp; ",
			"std::exception&amp;",
			"&lt;&lt;",
			"&amp;&amp;",
			"",
			"<td style=\"text-align: center;\">",
			"<th>",
			"&lt;&lt;",
			"&amp;$1",
			"&amp;",
			"&lt;",
			"http://yumetodo.github.io/2015_C_Textbook/",
			"layer_arg",
			":$1",
			"所要時間-cell",
			"2部",
			"1部",
			"2部",
			"1部",
			"CONSTANT",
			"&lt;",
			"&amp;",
			"&lt;",
			"h3>",
			"h2>",
			"h1>",
			"&lt;",
			"base",
			"",
			"<br />",
			"<a class=\"strong\">$1</a>",
			" class=\"strong\"",
			"&gt;",
			"&lt;",
			"&lt;std::_Wrap_alloc&lt;std::allocator&lt;std::_Vbase&gt;&gt;&gt;",
			"(uint64_t)"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12121,
						"regions":
						{
						},
						"selection":
						[
							[
								3579,
								3579
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"is_xml": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1139.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "20pointer_to_function.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7077,
						"regions":
						{
						},
						"selection":
						[
							[
								1196,
								1196
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"is_xml": false,
							"origin_encoding": "UTF-8",
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "06conditional_state.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21327,
						"regions":
						{
							"TagLint":
							{
								"flags": 2356,
								"icon": "dot",
								"regions":
								[
									[
										8015,
										8018
									]
								],
								"scope": "variable.parameter"
							}
						},
						"selection":
						[
							[
								962,
								962
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"is_xml": false,
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 26.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "09standard_input_output.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19515,
						"regions":
						{
						},
						"selection":
						[
							[
								5260,
								5260
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"is_xml": false,
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 167.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 222,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								222
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"default_dir": "D:\\user\\documents\\git\\2015_C_Textbook",
							"syntax": "Packages/C++/C.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Users/j.pierreno/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 94,
						"regions":
						{
						},
						"selection":
						[
							[
								91,
								91
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": true,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"origin_encoding": "ASCII",
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/Users/j.pierreno/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35717,
						"regions":
						{
						},
						"selection":
						[
							[
								7034,
								7042
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": true,
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1702.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/D/lsw-build2-master/msys64/home/j.pierreno/.bashrc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5878,
						"regions":
						{
						},
						"selection":
						[
							[
								3893,
								3893
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"origin_encoding": "ASCII",
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1215.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "08preprocess_and_constant.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20577,
						"regions":
						{
						},
						"selection":
						[
							[
								18380,
								18380
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_complete": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"in_converting": true,
							"is_xml": false,
							"origin_encoding": "UTF-8-SIG",
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 632.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "syntaxhighlighter/scripts/shBrushCpp.js",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 5284,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"origin_encoding": "ASCII",
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "2015_C_Textbook.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 197.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
